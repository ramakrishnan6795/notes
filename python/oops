Object Oriented Programming:
  It is about: Class, Object, Inheritance, Polymorphism, Data Abstraction and Data Encapsulation.
  Each objet could be anything which exists in real-time, Each objects has characteristics and functions.
    Charateristics --> name, age (variables)
    Functions
    
  why oops? --> to group related functions, To create template/blue print
  Inside the class the functions are called as methods and the methods will have first parameter as "self" and it can be any name 
  while alling the methods in class, the "self" parameter will be assigned with the value "ovject_name" which we have created
  Inside a class, we can access one method variables in another methods
  we can access the variables inside the methods of class by object_name.variable_name from outside the class(eg. From main function)
  we can access the class variables by class_name.variable_name inside the method of a class
  
  EXAMPLE: 1
  import os
  class Tomcat:
    def get_details_for_each_tomcat(self,server_xml):
      self.tcf=server_xml
      self.th=os.path.dirname(os.path.dirname(server_xml))
      return None

    def display_details(self):
      print(f'The tomcat config file is: {self.tcf}\nThe tomcat home is: {self.th}')
      return None		

  def main():
    tomcat7=Tomcat()
    tomcat9=Tomcat()

    tomcat7.get_details_for_each_tomcat("/home/Automation/tomcat7/conf/server.xml")
    #get_details_for_each_tomcat('tomcat7',"/home/Automation/tomcat7/conf/server.xml")
    tomcat9.get_details_for_each_tomcat("/home/Automation/tomcat9/conf/server.xml")
    #get_details_for_each_tomcat('tomcat9',"/home/Automation/tomcat9/conf/server.xml")
    #print(tomcat9.tcf)
    #print(tomcat7.th)
    #print(tomcat9.th)
    #print(tomcat7.tcf)
    tomcat9.display_details()
    tomcat7.display_details()
    #display_details('tomcat7')
    tomcat9.display_details()

    return None

  if __name__=="__main__":
    main()
    
  EXAMPLE: 2
  class emp:
    count=0
    def get_name_age_salary(self,name,age,salary):
      self.name=name
      self.age=age 
      self.salary=salary
      self.increase_count_for_emp()
      #self.display_details()
      return None
    def increase_count_for_emp(self):
      emp.count=emp.count+1
      return None
    def display_details(self):
      print(f'The name is: {self.name}\nThe age is: {self.age}\nThe salary is: {self.salary}')
      return None

  emp1=emp()
  emp2=emp()

  emp1.get_name_age_salary('John',34,45000)
  #emp1.increase_count_for_emp()
  emp2.get_name_age_salary('Cliton',25,54000)
  #emp2.increase_count_for_emp()

  print(emp.count)

  CONSTRUCTOR:
    A constructor is a special method that is called by default whenever you create an object from the class
    The constructor method name is __init__(self)
    
  EXAMPLE: 3
  class Emp(object):
    def __init__(self,name,salary):
      self.name=name
      self.salary=salary
      return None
    def display(self):
      print(f"The name is: {self.name}\nThe salary is: {self.salary}")
      return None		


  emp1=Emp('Ramu',56000)
  emp2=Emp("Naren",90000)

  emp1.display()
  #emp2.display()
  
  EXAMPLE: 4 without oops
  #!/bin/python3
  import os

  def get_all_tomcats():
      list_of_config_files=[]
      for r,d,f in os.walk("/"):
          for each_file in f:
              if each_file=='server.xml':
                  list_of_config_files.append(os.path.join(r,each_file))
      return list_of_config_files
  def display_details(home_cnf_files):
      for each_key in home_cnf_files.keys():
          print(f'The Tomcat home is: {home_cnf_files[each_key][0]}')
          print(f'The Tomcat config file is:{home_cnf_files[each_key][1]}' )
      return None

  def main():
      print("Finding list of tomcats...")
      list_of_tomcats=get_all_tomcats()
      #print(list_of_tomcats)
      cnt=1
      home_cnf_files={}
      for each_config_file in list_of_tomcats:
          t_home=os.path.dirname(os.path.dirname(each_config_file))
          t_cnf_file=each_config_file
          home_cnf_files['tomcat'+str(cnt)]=[t_home,t_cnf_file]
          cnt+=1
      #print(home_cnf_files)
      display_details(home_cnf_files)
      return None


  if __name__ == '__main__':
      main()

  EXAMPLE: 5 with oops
  #!/bin/python3
  import os
  class Tomcat(object):
      def get_home_conf_file(self,server_xml):
          self.t_home=os.path.dirname(os.path.dirname(server_xml))
          self.conf_file=server_xml
          return None
      def display_details(self):
          print("Tomcat home is: ",self.t_home)
          print("Tomcat conf file is: ",self.conf_file)
          return None

  def get_all_tomcats():
      list_of_config_files=[]
      for r,d,f in os.walk("/"):
          for each_file in f:
              if each_file=='server.xml':
                  list_of_config_files.append(os.path.join(r,each_file))
      return list_of_config_files
  def main():
      print("Finding list of tomcats...")
      list_of_tomcats=get_all_tomcats()
      tomcat_objects=[]
      for each_file in list_of_tomcats:
          tomcat_object=Tomcat()
          tomcat_object.get_home_conf_file(each_file)
          tomcat_objects.append(tomcat_object)
      for each_ob in tomcat_objects:
          each_ob.display_details()

      return None
  if __name__ == '__main__':
      main()
  
  Destructor:
    In python, destructors are not required as such c++, because Python has a garbage collector that handles memory management automatically
    There is a default method in the class __del__(self), but not required to be impleted and called
    This __del__() method will be called by garbage collector automatically, when the created object is deleted by garbage collector
  
  EXAMPLE: 6
  class Person(object):
    def __init__(self,name,age):
      print("an object has been created")
      self.name=name
      self.age=age		
      return None
    def __del__(self):
      print("object has been deleted")
      return None

  per1=Person('Jhon',26)
  
  Polymorphism:
    Polymorphism allow us to define the same methods in different classes
