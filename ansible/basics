1. Dependency for using Ansible.
Python should be installed in both ansible host and also in all target servers

2. Where the default ansible configuration file and host/inventory file is located
/etc/ansible/ansible.cfg

3. How ansible will find the ansible configurations
Ansible will read ANSIBLE_CONFIG, ansible.cfg in the current working directory, .ansible.cfg in the home directory, or /etc/ansible/ansible.cfg, whichever it
finds first

4. Nearly all parameters can be overridden in ansible-playbook or with command line flags.

5. To list all options of ansible
ansible-config list

6. Executing the ansible module using command-line
ansible host_name/group_name -m ping -i inventory.txt
host_name/group_name --> from inventory file (/etc/ansible/hosts)
-m ping --> module name (here module name ping is passed)
-i inventory.txt --> To pass custom inventory file (Here incentory file named inventory.txt in current dirctory is passed)

7. Host key checking can be disbaled/enabled by the following ways
By default host_key_checking is enabled
In ansible.cfg --> host_key_checking = False
In inventory file --> ansible_ssh_user=vagrant ansible_ssh_port=2222 ansible_ssh_host=127.0.0.1 host_key_checking=false
In ansible.cfg --> ansible_ssh_common_args='-o StrictHostKeyChecking=no'
As environment variable --> export ANSIBLE_HOST_KEY_CHECKING=False  (This might not work on newer ansible versions)

8. To save output to a variable and printing that variable
- name: print to stdout
  command: echo "hello"
  register: out
- debug: msg="{{ out.stdout }}"
- debug: msg="{{ out.stderr }}"
- debug: var=out.stdout_lines

9. To install package based on distro/0s-family
[Older way]
- name: install the latest version of Apache on CentOS
  yum: name=httpd state=latest
  when: ansible_os_family == "RedHat"

- name: install the latest version of Apache on Debian
  apt: pkg=apache2 state=latest 
  when: ansible_os_family == "Debian"
  
[Newer way]
- name: Install foo
  package: name=httpd state=latest
  
When the package name differs across OS families, we can handle it with distribution or OS family specific vars files:
Here th packae name "httpd" is diffrent for distros, in Redhat it is "httpd", but for Ubuntu it is "apache2"
---
- hosts: all
  remote_user: root
  vars_files:
    - "vars/common.yml"
    - [ "vars/{{ ansible_os_family }}.yml", "vars/os_defaults.yml" ]
  tasks:
    - name: Install the apache package
      package:
        name: "{{ apache }}"
        state: present

10 From one handler we can notify the other handler, but the problem, it is not returning "True" it wont notify the other handlers. After ansible 2.3 version,
the better way is to group the tasks inside "block" (block is also one module)

In block we define the become, remote_user, when condition as common and it will be automatically applied to each task under this block
By default the all the tasks inside the will be executed if the before tasks are suucess. If the last task is returning OK, still it will run the next tasks.
If we want the next task to be executed only if the last task is success, then capture the task status to a varibale and use that varibale in when condition in
the next task
 - name: Installing apache2 on Debian(ubuntr)
      block:
        - name: Installing apache2 on Debian(Ubuntu)
          apt: name=apache2 state=present
          register: result

        - name: Start apache2
          service: name=apache2 state=started
          register: resultStartingApache2
          when: result is succeeded
          
11 Types of Inventories
--> static inventory -- > All the Ip are defined in the staic file (/etc/ansible/hosts)
--> Dynamic inventory --> It will fetch the Ip's dynamically using the scipts shell,python/plugins
In the earlier version of ansible,  we have to write the python script and we have to pass like below for dynamic Inventory
ansible-playbook -i inventory.py playbook.yaml

Now this dynamic inventory scripts are already written for some cloud providers
aws ec2, azure, openstack, gcp, space walk, jails etc..

To use aws ec2 dynamic inventory, we have to download the ec2.py, ec2.ini from the anisble github repo to our ansible host machine  
To run this python scripy we need one dependency module to be installed boto or boto3 (which is python module for aws)
sudo pip install boto

Next, for aws account credentials, if our ansible host also in aws ec2 then we can use the IAM role for authentication or else we have to configure the credentials in
the server manually

Then if we run the ec2.py it will return the josn data will lost of detials about the ec2-servers,
The ec2 group will have all the ips in that account, and many more group are there in that json based on instance_type, ami_id, ec2_region etc...

ansible -i ec2.py ec2 -m ping 
Here -i ec2.py --> is the custom inventory script available from ansible
ec2 --> is the group name avilable in the json data returned from ec2.py

If we want custom group name, we have to craete our own python script for ec2




