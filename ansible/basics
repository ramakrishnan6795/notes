1. Dependency for using Ansible.
Python should be installed in both ansible host and also in all target servers

2. Where the default ansible configuration file and host/inventory file is located
/etc/ansible/ansible.cfg

3. How ansible will find the ansible configurations
Ansible will read ANSIBLE_CONFIG, ansible.cfg in the current working directory, .ansible.cfg in the home directory, or /etc/ansible/ansible.cfg, whichever it
finds first

4. Nearly all parameters can be overridden in ansible-playbook or with command line flags.

5. To list all options of ansible
ansible-config list

6. Executing the ansible module using command-line
ansible host_name/group_name -m ping -i inventory.txt
host_name/group_name --> from inventory file (/etc/ansible/hosts)
-m ping --> module name (here module name ping is passed)
-i inventory.txt --> To pass custom inventory file (Here incentory file named inventory.txt in current dirctory is passed)

7. Host key checking can be disbaled/enabled by the following ways
By default host_key_checking is enabled
In ansible.cfg --> host_key_checking = False
In inventory file --> ansible_ssh_user=vagrant ansible_ssh_port=2222 ansible_ssh_host=127.0.0.1 host_key_checking=false
In ansible.cfg --> ansible_ssh_common_args='-o StrictHostKeyChecking=no'
As environment variable --> export ANSIBLE_HOST_KEY_CHECKING=False  (This might not work on newer ansible versions)

8. To save output to a variable and printing that variable
- name: print to stdout
  command: echo "hello"
  register: out
- debug: msg="{{ out.stdout }}"
- debug: msg="{{ out.stderr }}"
- debug: var=out.stdout_lines

9. To install package based on distro/0s-family
[Older way]
- name: install the latest version of Apache on CentOS
  yum: name=httpd state=latest
  when: ansible_os_family == "RedHat"

- name: install the latest version of Apache on Debian
  apt: pkg=apache2 state=latest 
  when: ansible_os_family == "Debian"
  
[Newer way]
- name: Install foo
  package: name=httpd state=latest
  
When the package name differs across OS families, we can handle it with distribution or OS family specific vars files:
Here th packae name "httpd" is diffrent for distros, in Redhat it is "httpd", but for Ubuntu it is "apache2"
---
- hosts: all
  remote_user: root
  vars_files:
    - "vars/common.yml"
    - [ "vars/{{ ansible_os_family }}.yml", "vars/os_defaults.yml" ]
  tasks:
    - name: Install the apache package
      package:
        name: "{{ apache }}"
        state: present
